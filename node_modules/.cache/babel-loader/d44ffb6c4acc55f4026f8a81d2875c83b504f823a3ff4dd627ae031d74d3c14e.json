{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { useMemo } from 'react';\n/**\r\n * Internal utility hook to get an array-version of spec.accept.\r\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\r\n * @param spec\r\n */\n\nexport function useAccept(spec) {\n  var accept = spec.accept;\n  return useMemo(function () {\n    invariant(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}","map":{"version":3,"names":["invariant","useMemo","useAccept","spec","accept","Array","isArray"],"sources":["E:/Github Repos/expense-tracker/expense-tracker/node_modules/react-dnd/dist/esm/hooks/useDrop/useAccept.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\r\nimport { useMemo } from 'react';\r\n/**\r\n * Internal utility hook to get an array-version of spec.accept.\r\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\r\n * @param spec\r\n */\r\n\r\nexport function useAccept(spec) {\r\n  var accept = spec.accept;\r\n  return useMemo(function () {\r\n    invariant(spec.accept != null, 'accept must be defined');\r\n    return Array.isArray(accept) ? accept : [accept];\r\n  }, [accept]);\r\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,sBAAsB;AAChD,SAASC,OAAO,QAAQ,OAAO;AAC/B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAS,CAACC,IAAI,EAAE;EAC9B,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;EACxB,OAAOH,OAAO,CAAC,YAAY;IACzBD,SAAS,CAACG,IAAI,CAACC,MAAM,IAAI,IAAI,EAAE,wBAAwB,CAAC;IACxD,OAAOC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;EAClD,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}