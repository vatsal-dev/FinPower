{"ast":null,"code":"import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry';\nimport { areArraysEqual } from '../utils/equality';\nimport { NONE, ALL } from '../utils/dirtiness';\nimport { xor } from '../utils/js_utils';\nexport function reduce() {\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case HOVER:\n      break;\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n  var _action$payload = action.payload,\n    _action$payload$targe = _action$payload.targetIds,\n    targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\n    _action$payload$prevT = _action$payload.prevTargetIds,\n    prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\n  var result = xor(targetIds, prevTargetIds);\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n  if (!didChange) {\n    return NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  var innermostTargetId = targetIds[targetIds.length - 1];\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["BEGIN_DRAG","PUBLISH_DRAG_SOURCE","HOVER","END_DRAG","DROP","ADD_SOURCE","ADD_TARGET","REMOVE_SOURCE","REMOVE_TARGET","areArraysEqual","NONE","ALL","xor","reduce","_state","arguments","length","undefined","action","type","_action$payload","payload","_action$payload$targe","targetIds","_action$payload$prevT","prevTargetIds","result","didChange","prevInnermostTargetId","innermostTargetId","push"],"sources":["E:/Github Repos/expense-tracker/expense-tracker/node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js"],"sourcesContent":["import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';\r\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry';\r\nimport { areArraysEqual } from '../utils/equality';\r\nimport { NONE, ALL } from '../utils/dirtiness';\r\nimport { xor } from '../utils/js_utils';\r\nexport function reduce() {\r\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\r\n\r\n  var action = arguments.length > 1 ? arguments[1] : undefined;\r\n\r\n  switch (action.type) {\r\n    case HOVER:\r\n      break;\r\n\r\n    case ADD_SOURCE:\r\n    case ADD_TARGET:\r\n    case REMOVE_TARGET:\r\n    case REMOVE_SOURCE:\r\n      return NONE;\r\n\r\n    case BEGIN_DRAG:\r\n    case PUBLISH_DRAG_SOURCE:\r\n    case END_DRAG:\r\n    case DROP:\r\n    default:\r\n      return ALL;\r\n  }\r\n\r\n  var _action$payload = action.payload,\r\n      _action$payload$targe = _action$payload.targetIds,\r\n      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\r\n      _action$payload$prevT = _action$payload.prevTargetIds,\r\n      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\r\n  var result = xor(targetIds, prevTargetIds);\r\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\r\n\r\n  if (!didChange) {\r\n    return NONE;\r\n  } // Check the target ids at the innermost position. If they are valid, add them\r\n  // to the result\r\n\r\n\r\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\r\n  var innermostTargetId = targetIds[targetIds.length - 1];\r\n\r\n  if (prevInnermostTargetId !== innermostTargetId) {\r\n    if (prevInnermostTargetId) {\r\n      result.push(prevInnermostTargetId);\r\n    }\r\n\r\n    if (innermostTargetId) {\r\n      result.push(innermostTargetId);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,mBAAmB,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,qBAAqB;AAC5F,SAASC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,aAAa,QAAQ,qBAAqB;AAC1F,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC9C,SAASC,GAAG,QAAQ,mBAAmB;AACvC,OAAO,SAASC,MAAM,GAAG;EACvB,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAGL,IAAI;EAErF,IAAIQ,MAAM,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;EAE5D,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKjB,KAAK;MACR;IAEF,KAAKG,UAAU;IACf,KAAKC,UAAU;IACf,KAAKE,aAAa;IAClB,KAAKD,aAAa;MAChB,OAAOG,IAAI;IAEb,KAAKV,UAAU;IACf,KAAKC,mBAAmB;IACxB,KAAKE,QAAQ;IACb,KAAKC,IAAI;IACT;MACE,OAAOO,GAAG;EAAC;EAGf,IAAIS,eAAe,GAAGF,MAAM,CAACG,OAAO;IAChCC,qBAAqB,GAAGF,eAAe,CAACG,SAAS;IACjDA,SAAS,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,qBAAqB;IACzEE,qBAAqB,GAAGJ,eAAe,CAACK,aAAa;IACrDA,aAAa,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,qBAAqB;EACjF,IAAIE,MAAM,GAAGd,GAAG,CAACW,SAAS,EAAEE,aAAa,CAAC;EAC1C,IAAIE,SAAS,GAAGD,MAAM,CAACV,MAAM,GAAG,CAAC,IAAI,CAACP,cAAc,CAACc,SAAS,EAAEE,aAAa,CAAC;EAE9E,IAAI,CAACE,SAAS,EAAE;IACd,OAAOjB,IAAI;EACb,CAAC,CAAC;EACF;;EAGA,IAAIkB,qBAAqB,GAAGH,aAAa,CAACA,aAAa,CAACT,MAAM,GAAG,CAAC,CAAC;EACnE,IAAIa,iBAAiB,GAAGN,SAAS,CAACA,SAAS,CAACP,MAAM,GAAG,CAAC,CAAC;EAEvD,IAAIY,qBAAqB,KAAKC,iBAAiB,EAAE;IAC/C,IAAID,qBAAqB,EAAE;MACzBF,MAAM,CAACI,IAAI,CAACF,qBAAqB,CAAC;IACpC;IAEA,IAAIC,iBAAiB,EAAE;MACrBH,MAAM,CAACI,IAAI,CAACD,iBAAiB,CAAC;IAChC;EACF;EAEA,OAAOH,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}