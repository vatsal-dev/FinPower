{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildRegExpFromDelimiters = buildRegExpFromDelimiters;\nexports.canDrag = canDrag;\nexports.canDrop = canDrop;\nvar _escapeRegExp = require('lodash/escapeRegExp');\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\r\n * Convert an array of delimiter characters into a regular expression\r\n * that can be used to split content by those delimiters.\r\n * @param {Array<char>} delimiters Array of characters to turn into a regex\r\n * @returns {RegExp} Regular expression\r\n */\nfunction buildRegExpFromDelimiters(delimiters) {\n  var delimiterChars = delimiters.map(function (delimiter) {\n    // See: http://stackoverflow.com/a/34711175/1463681\n    var chrCode = delimiter - 48 * Math.floor(delimiter / 48);\n    return String.fromCharCode(96 <= delimiter ? chrCode : delimiter);\n  }).join('');\n  var escapedDelimiterChars = (0, _escapeRegExp2.default)(delimiterChars);\n  return new RegExp('[' + escapedDelimiterChars + ']+');\n}\n\n/**\r\n * Returns true when the tag is drag enabled\r\n * @param {object} params props of the tag element\r\n * @returns {boolean} true/false\r\n * The three different properties which controls this function are moveTag, readOnly and allowDragDrop.\r\n */\nfunction canDrag(params) {\n  var moveTag = params.moveTag,\n    readOnly = params.readOnly,\n    allowDragDrop = params.allowDragDrop;\n  return moveTag !== undefined && !readOnly && allowDragDrop;\n}\n\n/**\r\n * Returns true when the tag is drop enabled\r\n * @param {object} params props of the tag element\r\n * @returns {boolean} true/false\r\n * The two different properties which controls this function are readOnly and allowDragDrop.\r\n */\nfunction canDrop(params) {\n  var readOnly = params.readOnly,\n    allowDragDrop = params.allowDragDrop;\n  return !readOnly && allowDragDrop;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","buildRegExpFromDelimiters","canDrag","canDrop","_escapeRegExp","require","_escapeRegExp2","_interopRequireDefault","obj","__esModule","default","delimiters","delimiterChars","map","delimiter","chrCode","Math","floor","String","fromCharCode","join","escapedDelimiterChars","RegExp","params","moveTag","readOnly","allowDragDrop","undefined"],"sources":["E:/Github Repos/expense-tracker/expense-tracker/node_modules/react-tag-input/dist-modules/components/utils.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.buildRegExpFromDelimiters = buildRegExpFromDelimiters;\r\nexports.canDrag = canDrag;\r\nexports.canDrop = canDrop;\r\n\r\nvar _escapeRegExp = require('lodash/escapeRegExp');\r\n\r\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * Convert an array of delimiter characters into a regular expression\r\n * that can be used to split content by those delimiters.\r\n * @param {Array<char>} delimiters Array of characters to turn into a regex\r\n * @returns {RegExp} Regular expression\r\n */\r\nfunction buildRegExpFromDelimiters(delimiters) {\r\n  var delimiterChars = delimiters.map(function (delimiter) {\r\n    // See: http://stackoverflow.com/a/34711175/1463681\r\n    var chrCode = delimiter - 48 * Math.floor(delimiter / 48);\r\n    return String.fromCharCode(96 <= delimiter ? chrCode : delimiter);\r\n  }).join('');\r\n  var escapedDelimiterChars = (0, _escapeRegExp2.default)(delimiterChars);\r\n  return new RegExp('[' + escapedDelimiterChars + ']+');\r\n}\r\n\r\n/**\r\n * Returns true when the tag is drag enabled\r\n * @param {object} params props of the tag element\r\n * @returns {boolean} true/false\r\n * The three different properties which controls this function are moveTag, readOnly and allowDragDrop.\r\n */\r\nfunction canDrag(params) {\r\n  var moveTag = params.moveTag,\r\n      readOnly = params.readOnly,\r\n      allowDragDrop = params.allowDragDrop;\r\n\r\n  return moveTag !== undefined && !readOnly && allowDragDrop;\r\n}\r\n\r\n/**\r\n * Returns true when the tag is drop enabled\r\n * @param {object} params props of the tag element\r\n * @returns {boolean} true/false\r\n * The two different properties which controls this function are readOnly and allowDragDrop.\r\n */\r\nfunction canDrop(params) {\r\n  var readOnly = params.readOnly,\r\n      allowDragDrop = params.allowDragDrop;\r\n\r\n  return !readOnly && allowDragDrop;\r\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB;AAC7DF,OAAO,CAACG,OAAO,GAAGA,OAAO;AACzBH,OAAO,CAACI,OAAO,GAAGA,OAAO;AAEzB,IAAIC,aAAa,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAElD,IAAIC,cAAc,GAAGC,sBAAsB,CAACH,aAAa,CAAC;AAE1D,SAASG,sBAAsB,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,yBAAyB,CAACU,UAAU,EAAE;EAC7C,IAAIC,cAAc,GAAGD,UAAU,CAACE,GAAG,CAAC,UAAUC,SAAS,EAAE;IACvD;IACA,IAAIC,OAAO,GAAGD,SAAS,GAAG,EAAE,GAAGE,IAAI,CAACC,KAAK,CAACH,SAAS,GAAG,EAAE,CAAC;IACzD,OAAOI,MAAM,CAACC,YAAY,CAAC,EAAE,IAAIL,SAAS,GAAGC,OAAO,GAAGD,SAAS,CAAC;EACnE,CAAC,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC;EACX,IAAIC,qBAAqB,GAAG,CAAC,CAAC,EAAEf,cAAc,CAACI,OAAO,EAAEE,cAAc,CAAC;EACvE,OAAO,IAAIU,MAAM,CAAC,GAAG,GAAGD,qBAAqB,GAAG,IAAI,CAAC;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASnB,OAAO,CAACqB,MAAM,EAAE;EACvB,IAAIC,OAAO,GAAGD,MAAM,CAACC,OAAO;IACxBC,QAAQ,GAAGF,MAAM,CAACE,QAAQ;IAC1BC,aAAa,GAAGH,MAAM,CAACG,aAAa;EAExC,OAAOF,OAAO,KAAKG,SAAS,IAAI,CAACF,QAAQ,IAAIC,aAAa;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASvB,OAAO,CAACoB,MAAM,EAAE;EACvB,IAAIE,QAAQ,GAAGF,MAAM,CAACE,QAAQ;IAC1BC,aAAa,GAAGH,MAAM,CAACG,aAAa;EAExC,OAAO,CAACD,QAAQ,IAAIC,aAAa;AACnC"},"metadata":{},"sourceType":"script","externalDependencies":[]}